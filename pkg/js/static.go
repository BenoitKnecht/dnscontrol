// Code generated by "esc "; DO NOT EDIT.

package js

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	return nil, nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// _escFS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func _escFS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// _escDir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func _escDir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// _escFSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func _escFSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// _escFSMustByte is the same as _escFSByte, but panics if name is not present.
func _escFSMustByte(useLocal bool, name string) []byte {
	b, err := _escFSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// _escFSString is the string version of _escFSByte.
func _escFSString(useLocal bool, name string) (string, error) {
	b, err := _escFSByte(useLocal, name)
	return string(b), err
}

// _escFSMustString is the string version of _escFSMustByte.
func _escFSMustString(useLocal bool, name string) string {
	return string(_escFSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/helpers.js": {
		local:   "pkg/js/helpers.js",
		size:    19747,
		modtime: 0,
		compressed: `
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
1N3ODQSL/xcAAP//0C2IViNNAAA=
`,
	},

	"/": {
		isDir: true,
		local: "pkg/js",
	},
}
